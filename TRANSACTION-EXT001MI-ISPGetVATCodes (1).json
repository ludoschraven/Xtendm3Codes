{"utilities":{},"programModules":{"EXT001MI":{"program":"EXT001MI","triggers":{},"transactions":{"ISPGetVATCodes":{"sourceUuid":"508ac32e-ae10-4688-a843-f94531ab82b8","name":"ISPGetVATCodes","program":"EXT001MI","description":"ALL_MI_0001_GetVATCodes","active":true,"multi":true,"modified":1668253432605,"modifiedBy":"MALALS01","outputFields":[{"name":"DIVI","description":"division","length":3,"mandatory":false,"type":"A"},{"name":"VTCD","description":"VAT code","length":2,"mandatory":false,"type":"N"},{"name":"TX40","description":"description","length":40,"mandatory":false,"type":"A"},{"name":"VTD1","description":"nondeductible VAT 1","length":5,"mandatory":false,"type":"N"},{"name":"VTP1","description":"VAT rate 1","length":5,"mandatory":false,"type":"N"},{"name":"VTD2","description":"nondeductible VAT 2","length":5,"mandatory":false,"type":"N"},{"name":"VTP2","description":"VAT rate 2","length":5,"mandatory":false,"type":"N"},{"name":"FRDT","description":"from date","length":8,"mandatory":false,"type":"N"},{"name":"ONSR","description":"VAT on service","length":1,"mandatory":false,"type":"A"},{"name":"VATT","description":"VAT method","length":20,"mandatory":false,"type":"N"},{"name":"CSCD","description":"country","length":3,"mandatory":false,"type":"A"}],"inputFields":[],"utilities":[]}},"batches":{}}},"sources":{"508ac32e-ae10-4688-a843-f94531ab82b8":{"uuid":"508ac32e-ae10-4688-a843-f94531ab82b8","updated":1668253423265,"updatedBy":"MALALS01","created":1652953843455,"createdBy":"MALALS01","apiVersion":"0.9","beVersion":"16.0.0.20220817161547","codeHash":"0F303E990572E7B83CAF1BFB1463424131BBCC87898C50D4250FC2DB59E44D40","code":""}}}